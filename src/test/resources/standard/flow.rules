
# lambda #
(lambda (:args...) :body) => "(function (" :args,,, "){ return " :body ";})"

# parameterless lambda #
(lambda :body) => "(function (){ return " :body ";})"

# define #
(define :name :value) => "var " :name " = " :value ";"

# function define #
(define :name (:args...) :body) => "var " :name " = (function(" :args,,, "){ return " :body ";});"

# set #
(set! :name :value) => :name "=" :value ";"

# let #
(let ((:name :value)...) :body) => "((function(" :name,,, "){ return " :body ";})(" :value,,, "))"

# let #
(let* ((:name :value)...) :body) => "(function(){" ("var " :name "=" :value ";")... "return " :body ";})()"

# letrec #
(letrec ((:name :value)...) :body) => "(function(){" ("var " :name ";")... (:name "=" :value ";")... "return " :body ";})()"

# cond #
(cond (:a :b) (:c :d)...) => "(function(){" "if(" :a "){ return " :b ";}" ("else if (" :c "){ return " :d ";}")... "})()"

# if #
(if :cond :then :else) => "(" :cond " ? " :then " : " :else ")"


# switch #
(switch :switchon (:case :result)... ('default :defcase)) => "(function (){ switch (" :switchon "){"
                                                                        ("case " :case ": return" :result ";")...
                                                                         "default: return " :defcase ";}})()"

# single begin #
(begin :x) => :x

# begin #
(begin :xs...) => "(" (:xs),,, ")"